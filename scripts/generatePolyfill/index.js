"use strict";
const consoleWithTime = require("../modules/console.js");
consoleWithTime.info("Start initialization...");
const exec = require("../modules/exec.js");
const fetch = require("../modules/fetch.js");
const fs = require("fs");
const path = require("path");
const unflaggableFeatures = require("./unflaggableFeatures.js");

const MAX_FEATURES_PER_FILE = 30;
const TARGET_CHROMIUM_VERSION = "70.0.3538.0";
const TARGET_UA = `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${TARGET_CHROMIUM_VERSION} Safari/537.36`;

(async () => {
    try {
        await fs.promises.rm("tmp", {
            recursive: true,
            force: true,
        });
        await fs.promises.mkdir("tmp", {
            recursive: true,
        });
        for (const file of await fs.promises.readdir("src/gadgets/libPolyfill/")) {
            if (file.startsWith("MediaWiki:Gadget-libPolyfill")) {
                await fs.promises.rm(path.join("src/gadgets/libPolyfill/", file), {
                    force: true,
                    recursive: true,
                });
            }
        }
        consoleWithTime.info("Start compile src/ to temporary bundle file...");
        await exec("npx tsc --project tsconfig.json --outFile tmp/bundle.js");
        consoleWithTime.info("\tDone.");
        consoleWithTime.info("Start analyse the temporary bundle file...");
        const analysisReport = [...new Set(JSON.parse(await exec("npx @financial-times/js-features-analyser analyse --file tmp/bundle.js")))];
        const features = analysisReport.filter((feature) => !unflaggableFeatures.includes(feature));
        consoleWithTime.info("\tDone.");
        consoleWithTime.info("\tfeatures", JSON.stringify(features, null, 4));
        const parts = Math.ceil(features.length / MAX_FEATURES_PER_FILE);
        consoleWithTime.info("\tfeatures split in to", parts, "parts");
        const newunflaggableFeatures = [];
        for (let i = 0; i < parts; i++) {
            consoleWithTime.info("Part", i, "-", "Start download polyfill file...");
            const url = new URL("https://polyfill.io/v3/polyfill.js");
            const featuresPart = features.slice(i * MAX_FEATURES_PER_FILE, (i + 1) * MAX_FEATURES_PER_FILE).join(",");
            url.searchParams.set("features", featuresPart);
            url.searchParams.set("ua", TARGET_UA);
            const data = await fetch.text(url, {
                method: "GET",
                headers: {
                    "user-agent": TARGET_UA,
                },
            });
            consoleWithTime.info("Part", i, "-", "\tDone.");
            if (data.includes("/* No polyfills needed for current settings and browser */")) {
                consoleWithTime.info("Part", i, "-", "This part needs no polyfill, skip.");
                continue;
            }
            consoleWithTime.info("Part", i, "-", "Start write polyfill file to gadget-libPolyfill...");
            const code = [
                "/**",
                " * Generated by scripts/generatePolyfill.js",
                " * Options:",
                ` *     targetChromiumVersion: "${TARGET_CHROMIUM_VERSION}"`,
                ` *     targetUA: "${TARGET_UA}"`,
                " *     unflaggableFeatures: \"scripts/unflaggableFeatures.js\"",
                ` *     flaggableFeatures: ${JSON.stringify(featuresPart, null, 1).replace(/\n */g, " ")}`,
                " */",
            ];
            code.push(data, "");
            await fs.promises.writeFile(`src/gadgets/libPolyfill/MediaWiki:Gadget-libPolyfill_part${i}.js`, code.join("\n"));
            consoleWithTime.info("Part", i, "-", "\tDone.");
            if (data.includes("These features were not recognised")) {
                const match = data.match(/(?<=\n \* These features were not recognised:\n \* - )[^\n]+?(?=\s*\*\/)/)?.[0]?.split?.(/,-\s*/);
                if (Array.isArray(match)) {
                    newunflaggableFeatures.push(...match);
                } else {
                    console.info(`::error title=New unflaggable features found::There are some new unflaggable features that have been detected, but unparsable, please try it yourself: ${url}`);
                }
            }
        }
        if (newunflaggableFeatures.length > 0) {
            console.info(`::error title=New unflaggable features detected::There are some new unflaggable features that have been detected: ${newunflaggableFeatures.join(", ")}`);
        }
        process.exit(0);
    } catch (e) {
        consoleWithTime.error(e);
        process.exit(1);
    }
})();
