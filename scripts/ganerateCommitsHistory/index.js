const bots = [
    "GH:github-actions",
    "GH:GitHub",
    "GH:GitHub Actions",
];

import console from "../modules/console.js";
import fs from "fs";
import { startGroup, endGroup, exportVariable } from "@actions/core";
import { isInMasterBranch } from "../modules/octokit.js";
import { git } from "../modules/git.js";
import { writeFile } from "../modules/jsonModule.js";
import createCommit from "../modules/createCommit.js";
if (!isInMasterBranch) {
    console.info("Not running in non-master branch, exit.");
    process.exit(0);
}
console.info("Initialization done.");
const rawMailMap = await fs.promises.readFile(".mailmap", { encoding: "utf-8" });
startGroup("Raw .mailmap:");
console.info(rawMailMap);
endGroup();
const mailmap = {};
startGroup(".mailmap parser:");
for (const rawLine of rawMailMap.replace(/#[^\n]*/g, "").split("\n")) {
    console.info("Parsing:", rawLine);
    const line = rawLine.trim();
    if (line.length === 0) {
        console.info("\tEmpty line, skip.");
        continue;
    }
    const match = line.match(/^(.+?) <([^>]+)/);
    console.info("\tMatch:", match);
    if (!Array.isArray(match) || match.length < 3) {
        console.info("\tMatch not valid, skip.");
        continue;
    }
    const [, username, email] = line.match(/^(.+?) <([^>]+)/);
    console.info("\tusername:", username);
    console.info("\temail:", email);
    mailmap[email] = username;
}
startGroup("Parsed .mailmap:");
console.info(mailmap);
endGroup();
const { all: rawHistory } = await git.log({
    format: {
        hash: "%H",
        date: "%aI",
        committer_name: "%cN",
        committer_email: "%cE",
    },
});
startGroup("Raw history:");
console.info(rawHistory);
endGroup();
const history = {};
startGroup("Raw history parser:");
for (const { hash, date, committer_name, committer_email } of rawHistory) {
    console.info("Parsing:", { date, hash, committer_email, committer_name });
    const username = Reflect.has(mailmap, committer_email) ? `U:${mailmap[committer_email]}` : `GH:${committer_name}`;
    console.info("\tusername:", username);
    if (username.endsWith("[bot]") || bots.includes(username)) {
        //console.info("\tThis commit came from a bot, skip.");
        continue;
    }
    if (!Array.isArray(history[username])) {
        history[username] = [];
    }
    history[username].push({
        commit: hash,
        datetime: date,
    });
}
endGroup();
startGroup("Parsed history:");
console.info(history);
endGroup();
await writeFile("src/global/zh/MediaWiki:GHIAHistory.json", history);
await createCommit("auto: commit history generated by ganerateCommitsHistory");
exportVariable("linguist-generated-generatePolyfill", JSON.stringify(["src/global/zh/MediaWiki:GHIAHistory.json"]));
console.info("Done.");
